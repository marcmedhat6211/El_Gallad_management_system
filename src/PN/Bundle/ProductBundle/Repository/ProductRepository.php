<?php

namespace PN\Bundle\ProductBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use PN\Bundle\ProductBundle\Entity\Product;
use PN\Bundle\ProductBundle\Entity\ProductPrice;
use PN\Bundle\UserBundle\Entity\User;
use PN\ServiceBundle\Utils\Date;
use PN\ServiceBundle\Utils\Validate;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $statement = $this->getStatement();
        $statement->where("p.id=:id");
        $statement->setParameter("id", $id);
        $product = $statement->getQuery()->getOneOrNullResult();
        //        if ($product) {
        //            $product->minPrice = $this->getEntityManager()->getRepository(ProductPrice::class)->getMinPriceByProduct($product);
        //        }
        return $product;
    }

    /**
     * use in admin panel
     * @param Product $currentProduct
     * @return Product|null
     */
    public function getNextProductByCurrentProduct(Product $currentProduct)
    {
        $statement = $this->createQueryBuilder('p')
            ->where("p.deleted IS NULL")
            ->andWhere("p.id > :currentProductId")
            ->setParameter("currentProductId", $currentProduct->getId())
            ->orderBy("p.id", "ASC")
            ->setMaxResults(1);

        return $statement->getQuery()->getOneOrNullResult();

    }

    /**
     * use in admin panel
     * @param Product $currentProduct
     * @return Product|null
     */
    public function getPreviousProductByCurrentProduct(Product $currentProduct)
    {
        $statement = $this->createQueryBuilder('p')
            ->where("p.deleted IS NULL")
            ->andWhere("p.id < :currentProductId")
            ->setParameter("currentProductId", $currentProduct->getId())
            ->orderBy("p.id", "DESC")
            ->setMaxResults(1);

        return $statement->getQuery()->getOneOrNullResult();
    }


    public function getRelatedProduct(Product $product, User $user = null, $limit = 3)
    {
        $search = new \stdClass();
        $search->notEqualProduct = $product->getId();
        $search->category = $product->getCategory()->getId();
        $search->deleted = 0;
        $search->publish = 1;
        if ($user) {
            $search->currentUserId = $user->getId();
        }

        return $this->filter($search, false, 0, $limit);
    }

    private function getStatement(\stdClass $search = null)
    {
        $statement = $this->createQueryBuilder('p')
            ->addSelect("pd")
            ->addSelect("c")
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.details', 'pd');

        if (isset($search->currentCollectionId) and Validate::not_null($search->currentCollectionId)) {
            $statement->leftJoin('p.productHasCollections', 'pc', "WITH", "pc.collection=:currentCollectionId");
            $statement->addSelect("IDENTITY(pc.product) selectedProductInCollection");
            $statement->setParameter("currentCollectionId", $search->currentCollectionId);
        } else {
            $statement->leftJoin('p.productHasCollections', 'pc');
        }
        if (isset($search->currentOccasionId) and Validate::not_null($search->currentOccasionId)) {
            $statement->leftJoin('p.productHasOccasions', 'oca', "WITH", "oca.occasion=:currentOccasionId");
            $statement->addSelect("IDENTITY(oca.product) selectedProductInOccasion");
            $statement->setParameter("currentOccasionId", $search->currentOccasionId);
        } else {
            $statement->leftJoin('p.productHasOccasions', 'oca');
        }

        return $statement;
    }

    private function filterWhereClause(QueryBuilder $statement, \stdClass $search)
    {
        if (isset($search->string) and Validate::not_null($search->string)) {
            $statement->andWhere('p.id LIKE :searchTerm '
                . 'OR p.title LIKE :searchTerm '
                . 'OR p.sku LIKE :searchTerm '
            );
            $statement->setParameter('searchTerm', '%' . trim($search->string) . '%');
        }
        if (isset($search->notEqualProduct) and $search->notEqualProduct != "") {
            $statement->andWhere('p.id != :notEqualProduct');
            $statement->setParameter('notEqualProduct', $search->notEqualProduct);
        }

        if (isset($search->uuid) and $search->uuid != "") {
            $statement->andWhere('p.uuid = :uuid');
            $statement->setParameter('uuid', $search->uuid);
        }


        if (isset($search->publish) and (is_bool($search->publish) or in_array($search->publish, [0, 1]))) {
            $statement->andWhere('p.publish = :publish');
            $statement->setParameter('publish', $search->publish);
        }

        if (isset($search->featured) and (is_bool($search->featured) or in_array($search->featured, [0, 1]))) {
            $statement->andWhere('p.featured = :featured');
            $statement->setParameter('featured', $search->featured);
        }
        if (isset($search->newArrival) and (is_bool($search->newArrival) or in_array($search->newArrival, [0, 1]))) {
            $statement->andWhere('p.newArrival = :newArrival');
            $statement->setParameter('newArrival', $search->newArrival);
        }


        if (isset($search->collection) and $search->collection != "") {
            $statement->andWhere('pc.collection = :collection');
            $statement->setParameter('collection', $search->collection);
        }

        if (isset($search->occasion) and $search->occasion != "") {
            $statement->andWhere('oca.occasion = :occasion');
            $statement->setParameter('occasion', $search->occasion);
        }

        if (isset($search->availability) and $search->availability == "in-stock") {
            $statement->andWhere('pd.stock > 0');
        } else {
            if (isset($search->availability) and $search->availability == "out-stock") {
                $statement->andWhere('pd.stock <= 0');
            }
        }

        if (isset($search->category) and $search->category != "") {
            $statement->andWhere('p.category = :category');
            $statement->setParameter('category', $search->category);
        }

        if (isset($search->categories) and is_array($search->categories) and count($search->categories) > 0) {
            $statement->andWhere('p.category IN (:categories)');
            $statement->setParameter('categories', $search->categories);
        }


        if (isset($search->ids) and is_array($search->ids) and count($search->ids) > 0) {
            $statement->andWhere('p.id IN (:ids)');
            $statement->setParameter('ids', $search->ids);
        }

        if (isset($search->uuids) and is_array($search->uuids) and count($search->uuids) > 0) {
            $statement->andWhere('p.uuid IN (:uuids)');
            $statement->setParameter('uuids', $search->uuids);
        }

        if (isset($search->deleted) and in_array($search->deleted, array(0, 1))) {
            if ($search->deleted == 1) {
                $statement->andWhere('p.deleted IS NOT NULL');
            } else {
                $statement->andWhere('p.deleted IS NULL');
            }
        }
    }

    private function filterOrder(QueryBuilder $statement, \stdClass $search)
    {
        $sortSQL = [
            'p.id',
            'p.sku',
            'p.title',
            'p.id',
            'c.title',
            "UNIX_TIMESTAMP(p.created)", // Recently added
            'p.publish',
            "RAND()", // Recently added
        ];

        if (isset($search->ordr) and Validate::not_null($search->ordr)) {
            $dir = $search->ordr['dir'];
            $columnNumber = $search->ordr['column'];
            if (isset($columnNumber) and array_key_exists($columnNumber, $sortSQL)) {
                $statement->orderBy($sortSQL[$columnNumber], $dir);
            }
        } else {
            $statement->orderBy($sortSQL[0], "DESC");
        }
        $statement->addOrderBy("p.title", "ASC");
    }

    private function filterPagination(QueryBuilder $statement, $startLimit = null, $endLimit = null)
    {
        if ($startLimit === null or $endLimit === null) {
            return false;
        }
        $statement->setFirstResult($startLimit)
            ->setMaxResults($endLimit);
    }

    private function filterCount(QueryBuilder $statement)
    {
        $statement->select("COUNT(DISTINCT p.id)");
        $statement->setMaxResults(1);

        $count = $statement->getQuery()->getOneOrNullResult();
        if (is_array($count) and count($count) > 0) {
            return (int)reset($count);
        }

        return 0;
    }

    public function filter($search, $count = false, $startLimit = null, $endLimit = null)
    {
        $statement = $this->getStatement($search);
        $this->filterWhereClause($statement, $search);

        if ($count == true) {
            return $this->filterCount($statement);
        }

        $statement->groupBy('p.id');
        $this->filterPagination($statement, $startLimit, $endLimit);
        $this->filterOrder($statement, $search);
        $rows = $statement->getQuery()->execute();
        $entities = [];
        foreach ($rows as $row) {
            if (is_array($row)) {
                $product = $row[0];
                $product->inCollection = (array_key_exists("selectedProductInCollection",
                        $row) and $row['selectedProductInCollection'] != null) ? true : false;
                $product->inOccasion = (array_key_exists("selectedProductInOccasion",
                        $row) and $row['selectedProductInOccasion'] != null) ? true : false;
            } else {
                $product = $row;
            }
            $product->isOnSale = $this->isProductOnSale($product);
            $product->minPrice = $this->getMinimumProductPrice($product);
            $product->maxPrice = $this->getMaximumProductPrice($product);
            $entities[] = $product;
        }

        return $entities;
    }

    private function getMinimumProductPrice(Product $product)
    {
        $productPrices = $product->getProductPrices();
        $minPrice = PHP_INT_MAX;
        if (!empty($productPrices)) {
            foreach ($productPrices as $productPrice) {
                if ($productPrice->getSellPrice() < $minPrice) {
                    $minPrice = $productPrice->getSellPrice();
                }
            }
        }

        return $minPrice;
    }

    private function getMaximumProductPrice(Product $product)
    {
        $productPrices = $product->getProductPrices();
        $maxPrice = 0;
        if (!empty($productPrices)) {
            foreach ($productPrices as $productPrice) {
                if ($productPrice->getSellPrice() > $maxPrice) {
                    $maxPrice = $productPrice->getSellPrice();
                }
            }
        }

        return $maxPrice;
    }

    private function isProductOnSale(Product $product): bool
    {
        foreach ($product->getProductPrices() as $productPrice) {
            if($productPrice->getPromotionalPrice() && $productPrice->getPromotionalExpiryDate() > new \DateTime()) {
                return true;
            }
        }

        return false;
    }

}
